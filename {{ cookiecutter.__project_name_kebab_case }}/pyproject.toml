[build-system]  # https://python-poetry.org/docs/pyproject/#poetry-and-pep-517
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]  # https://python-poetry.org/docs/pyproject/
name = "{{ cookiecutter.__project_name_kebab_case }}"
version = "0.0.0"
description = "{{ cookiecutter.project_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
readme = "README.md"
repository = "{{ cookiecutter.project_url }}"
packages = [
  { include = "{{ cookiecutter.__project_name_snake_case }}", from = "src" },
{%- if cookiecutter.project_type == "app" %}
  { include = "app", from = "src" },
{%- endif %}
]
{%- if cookiecutter.with_conventional_commits|int %}

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version_provider = "poetry"
{%- endif %}
{%- if cookiecutter.with_typer_cli|int %}

[tool.poetry.scripts]  # https://python-poetry.org/docs/pyproject/#scripts
{{ cookiecutter.__project_name_kebab_case }} = "{{ cookiecutter.__project_name_snake_case }}.cli:app"
{%- endif %}

[tool.poetry.dependencies]  # https://python-poetry.org/docs/dependency-specification/
python = ">={{ cookiecutter.python_version }},<4.0"
pydantic = ">=2.9.2"
{%- if cookiecutter.with_fastapi_api|int %}
coloredlogs = ">=15.0.1"
fastapi = { extras = ["all"], version = ">=0.115.0" }
gunicorn = ">=21.2.0"
{%- endif %}
{%- if cookiecutter.project_type == "app" %}
poethepoet = ">=0.25.0"
{%- endif %}
{%- if cookiecutter.with_fastapi_api|int %}
uvicorn = { extras = ["standard"], version = ">=0.29.0" }
{%- endif %}
{%- if cookiecutter.with_typer_cli|int %}
typer = { extras = ["all"], version = ">=0.12.0" }
{%- endif %}

[tool.poetry.group.test.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
{%- if cookiecutter.with_conventional_commits|int %}
commitizen = ">=3.21.3"
{%- endif %}
coverage = { extras = ["toml"], version = ">=7.4.4" }
mypy = ">=1.11.2"
pre-commit = ">=3.7.0"
pytest = ">=8.3.3"
pytest-mock = ">=3.14.0"
pytest-xdist = ">=3.5.0"
ruff = ">=0.6.8"
{%- if cookiecutter.development_environment == "strict" %}
safety = ">=3.1.0"
shellcheck-py = ">=0.10.0.1"
typeguard = ">=4.2.1"
{%- endif %}

[tool.poetry.group.dev.dependencies]  # https://python-poetry.org/docs/master/managing-dependencies/
cruft = ">=2.15.0"
ipykernel = ">=6.29.4"
ipywidgets = ">=8.1.2"
pdoc = ">=14.4.0"

[tool.coverage.report]  # https://coverage.readthedocs.io/en/latest/config.html#report
{%- if cookiecutter.development_environment == "strict" %}
fail_under = 50
{%- endif %}
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.run]  # https://coverage.readthedocs.io/en/latest/config.html#run
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["src"]

[tool.coverage.html]  # https://coverage.readthedocs.io/en/latest/cmd.html#html-reporting-coverage-html
directory = "reports/htmlcov"

[tool.coverage.xml]  # https://coverage.readthedocs.io/en/latest/cmd.html#cmd-xml
directory = "reports/coverage.xml"

[tool.mypy]  # https://mypy.readthedocs.io/en/latest/config_file.html
junit_xml = "reports/mypy.xml"
{%- if cookiecutter.with_fastapi_api|int %}
plugins = "pydantic.mypy"
{%- endif %}
{%- if cookiecutter.development_environment == "strict" %}
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
{%- endif %}
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
files = ["src/**/*.py", "tests/**/*.py", "scripts/**/*.py"]

[[tool.mypy.overrides]]
module = "tests.*"
disable_error_code = [
  "method-assign",  # Necessary when mocking
  "attr-defined",  # Mocked attributes are dynamically defined
  ]

{%- if cookiecutter.development_environment == "strict" and cookiecutter.with_fastapi_api|int %}

[tool.pydantic-mypy]  # https://pydantic-docs.helpmanual.io/mypy_plugin/#configuring-the-plugin
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
{%- endif %}

[tool.pytest.ini_options]  # https://docs.pytest.org/en/latest/reference/reference.html#ini-options-ref
addopts = "--color=yes --doctest-modules --exitfirst --failed-first{% if cookiecutter.development_environment == 'strict' %} --strict-config --strict-markers --typeguard-packages={{ cookiecutter.__project_name_snake_case }}{% endif %} --verbosity=2 --junitxml=reports/pytest.xml"
{%- if cookiecutter.development_environment == "strict" %}
filterwarnings = ["error", "ignore::DeprecationWarning"]
{%- endif %}
testpaths = ["src", "tests", "scripts"]
xfail_strict = true

[tool.ruff]  # https://github.com/charliermarsh/ruff
fix = true
preview = true
line-length = 99
src = ["src", "tests"]
target-version = "py{{ cookiecutter.python_version.split('.')[:2]|join }}"

[tool.ruff.lint]
{%- if cookiecutter.development_environment == "strict" %}
select = ["ALL"]
ignore = [
    "ANN002", # Missing type annotation for args. Complicates the code too much with the current annotation system.
    "ANN003", # Missing type annotation for kwargs. Complicates the code too much with the current annotation system.
    "ANN101", # Missing type annotation for self in method. Useless info as it's always the same and clutters the code.
    "ANN102", # Missing type annotation for cls in classmethod. Useless info as it's always the same and clutters the code.
    "ANN401", # No Any type. This can be useful in some cases.
    "ARG002", # Unused argument. Sometimes it's useful to keep the argument for future use, for retrocompatibility or to abide by an interface.
    "COM812", # Missing trailing comma in a single-line list. Already handled by ruff formater
    "CPY001", # Copyright notice missing. Not always needed.
    "E501", # Line too long. Already handled by ruff formater
    "E731", # Do not assign a lambda expression. Do not agree with this rule, it improves readability as it is self-documenting the lambda function.
    "FIX002", # Fix TODO before release. Not useful in our workflow.
    "FURB118",  # reimplemented-operator. We disagree that using the "`operator` module is more concise and communicates the intent of the code more clearly" compared to a lambda function with appropriately named args.
    "PD901", # Do not use the variable name "df". This is a common name for dataframes and is not a problem.
    "RET504", # Unnecessary assign before return. This is not bad, it helps debugging.
    "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes. Our use case is not security/cryptographic.
    "TD003", # Reference issue link.
    "TRY003", # Raise exception with vanilla arguments. Creating exception classes should be done only when really needed.
    "W505", # Doc line too long. Editor autowraps doc, and it's too much work to fix it.
    "ISC001", # single-line-implicit-string-concatenation, `z = "The quick " "brown fox."` becomes `z = "The quick brown fox."` This rule may cause conflicts when used with the formatter.
]
unfixable = ["ERA001", "F401", "F841", "T201", "T203"]
{%- else %}
select = ["A", "ASYNC", "B", "C4", "C90", "D", "DTZ", "E", "F", "FLY", "I", "ISC", "LOG", "N", "NPY", "PERF", "PGH", "PIE", "PL", "PT", "Q", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT"]
ignore = ["D203", "D213", "E501", "G010", "PGH003", "RET504", "S101", "S307"]
unfixable = ["F401", "F841"]
{%- endif %}

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "S101",  # Use of assert
  "D100",  # Missing docstring in public module
  "D101",  # Missing docstring in public class
  "INP001",  # implicit-namespace-package. Not required when using poetry.
  "SLF",  # Private member access
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true  # Allow unused *args and **kwargs in function signature

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.lint.pycodestyle]
max-doc-length = 99

[tool.ruff.lint.pydocstyle]
convention = "{{ cookiecutter.__docstring_style|lower }}"

[tool.ruff.lint.pylint]
max-args = 7

[tool.poe.tasks]  # https://github.com/nat-n/poethepoet

{{%- if cookiecutter.with_fastapi_api|int %}}
  [tool.poe.tasks.api]
  help = "Serve the REST API"
  shell = """
    if [ $dev ]
    then {
      uvicorn \
        --host $host \
        --port $port \
        --reload \
        app.api:app
    } else {
      gunicorn \
        --access-logfile - \
        --bind $host:$port \
        --graceful-timeout 10 \
        --keep-alive 10 \
        --log-file - \
        --timeout 30 \
        --worker-class uvicorn.workers.UvicornWorker \
        --worker-tmp-dir /dev/shm \
        --workers 2 \
        app.api:app
    } fi
    """

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this host (default: 0.0.0.0)"
    name = "host"
    options = ["--host"]
    default = "0.0.0.0"

    [[tool.poe.tasks.api.args]]
    help = "Bind socket to this port (default: 8000)"
    name = "port"
    options = ["--port"]
    default = "8000"

    [[tool.poe.tasks.api.args]]
    help = "Enable development mode"
    type = "boolean"
    name = "dev"
    options = ["--dev"]
{{%- endif %}}
  [tool.poe.tasks.docs]
  help = "Generate this {{ cookiecutter.project_type }}'s docs"
  cmd = """
    pdoc
      --docformat $docformat
      --output-directory $outputdirectory
      {{ cookiecutter.__project_name_snake_case }}
    """

    [[tool.poe.tasks.docs.args]]
    help = "The docstring style (default: {{ cookiecutter.__docstring_style|lower }})"
    name = "docformat"
    options = ["--docformat"]
    default = "{{ cookiecutter.__docstring_style|lower }}"

    [[tool.poe.tasks.docs.args]]
    help = "The output directory (default: docs)"
    name = "outputdirectory"
    options = ["--output-directory"]
    default = "docs"

  [tool.poe.tasks.lint]
  help = "Lint this {{ cookiecutter.project_type }}"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """
      pre-commit run
        --all-files
        --color always
      """
{%- if cookiecutter.development_environment == "strict" %}

    [[tool.poe.tasks.lint.sequence]]
    shell = "safety check --continue-on-error --full-report"
{%- endif %}

  [tool.poe.tasks.test]
  help = "Test this {{ cookiecutter.project_type }}"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage run"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage report"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage html"

    [[tool.poe.tasks.test.sequence]]
    cmd = "coverage xml"
